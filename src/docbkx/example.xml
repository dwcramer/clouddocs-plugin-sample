<?xml version="1.0" encoding="UTF-8"?>
  <book  
    xmlns="http://docbook.org/ns/docbook" 
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:xi="http://www.w3.org/2001/XInclude" 
    xmlns:svg="http://www.w3.org/2000/svg"
    version="5.0" 
    xml:id="example-foo" 
    status="DRAFT">
  <title>Rackspace Cloud Ipsum API Developer Guide</title>
  <info>
    <copyright>
      <year>2011</year>
      <year>2012</year>
      <holder>Rackspace US, Inc.</holder>
    </copyright>
    <releaseinfo>API v1.0</releaseinfo>
    <productname>Rackspace Cloud Ipsum</productname><!--Note that the <productname> text matches the first few words of the title. The build system splits the title into productname + rest of title on the pdf cover.-->
    <pubdate><!--If you leave the <pubdate> element empty, the build system inserts today's date automatically. --></pubdate>
    <revhistory>
      <revision>
        <date>2011-03-01</date>
        <revdescription>
          <para>This is the revision history section. The technical
            writer updates this section when major changes are made to
            the doc to indicate what changed. Typically this will
            include links into the body of the document. From this
            element we generate the list in <xref
              linkend="change_history"/> as well as the atom feed for
            the document an <link xlink:href="../atom.xml">atom feed</link> for the document. 
            I can change your doc!!
              <itemizedlist spacing="compact">
              <listitem>
                <para>Itemized lists are useful constructs for improving the readability of documents.</para>
              </listitem>
              <listitem>
                <para>One way that itemized lists improve readablity
                  is by adding whitespace between the list
                  items.</para>
              </listitem>
              <listitem>
                <para>Dates should be in the format YYYY-MM-DD.
                </para>
              </listitem>
            </itemizedlist></para>
        </revdescription>
      </revision>
      <revision>
        <date>2011-02-02</date>
        <revdescription>
          <para>This release fixed several bugs and, no doubt,
            introduced some new ones. Etiam eros ipsum, tempor ut
            laoreet nec, adipiscing vel eros. Integer sit amet nibh
            iaculis sapien sagittis blandit. Quisque vel lectus felis,
            vel congue lorem. Pellentesque vitae elit id sem faucibus
            ornare. Ut dictum dapibus quam, in scelerisque quam tempus
            sit amet. </para>
        </revdescription>
      </revision>
    </revhistory>
    <legalnotice role="rs-api">
      <annotation>
        <remark>Copyright details are filled in by the build system.</remark>
      </annotation>
    </legalnotice>
    <!-- 
       The values in raxm:metadata are used to control where the content appears on the landing page in docs.rackspace.com.
       Work with the Cloud Doc Tools team to find out what to put here. Once established, you should not change these
       values without first consulting with the CDT team.
    -->
      <raxm:metadata xmlns:raxm="http://docs.rackspace.com/api/metadata">
        <raxm:displayname>API Developer Guide</raxm:displayname>
        <raxm:product version="v1.0">files</raxm:product>
        <raxm:priority>20</raxm:priority>
      </raxm:metadata>
  </info>
  <preface xml:id="preface">
    <title>Preface</title>
    <para>Ipsum lorem lacus suscipit nunc, in consequat tortor turpis
      vel nibh. Nulla eros nulla, iaculis vel laoreet at, consectetur
      vitae massa. Praesent in imperdiet urna. Etiam commodo hendrerit
      tincidunt. Aliquam non tortor lectus, sit amet laoreet tortor.
      Vivamus sit amet tempor lorem. Fusce aliquam, lacus et eleifend
      auctor, augue justo consectetur risus, a congue arcu mi a velit.
      Donec lectus est, egestas eget laoreet a, accumsan ornare erat.
      Suspendisse sed nulla ligula.</para>
    <section xml:id="section_eow_tmw_ad">
      <title>Intended Audience</title>
      <para>This document is intended for technical writers and
        developers who are learning to write DocBook documents. We
        assume you have the following skills:</para>
      <itemizedlist spacing="compact">
        <listitem>
          <para>Basic technical writing concepts</para>
        </listitem>
        <listitem>
          <para>Basic XML </para>
        </listitem>
      </itemizedlist>
      <para>Maecenas euismod, lectus vitae tincidunt sollicitudin, est
        lacus suscipit nunc, in consequat tortor turpis vel nibh.
        Nulla eros nulla, iaculis vel laoreet at, consectetur vitae
        massa. Praesent in imperdiet urna. Etiam commodo hendrerit
        tincidunt. Aliquam non tortor lectus, sit amet laoreet tortor.
        Vivamus sit amet tempor lorem. Fusce aliquam, lacus et
        eleifend auctor, augue justo consectetur risus, a congue arcu
        mi a velit. Donec lectus est, egestas eget laoreet a, accumsan
        ornare erat. Suspendisse sed nulla ligula.</para>
      <para>Maecenas euismod, <link
          xlink:href="http://www.rackspace.com">lectus</link> vitae
        tincidunt sollicitudin, est lacus suscipit nunc, in consequat
        tortor turpis vel nibh. Nulla eros nulla, iaculis vel laoreet
        at, consectetur vitae massa. </para>
    </section>
    <section xml:id="change_history">
      <title>Document Change History</title>
      <para>This section is generated dynamically from the
          <tag>revhistory</tag> element in <tag>book/info</tag>. The
        processing instruction <code>&lt;?rax revhistory?></code> is
        replaced at build-time with a formatted version of the
          <tag>revhistory</tag> section.</para>
      <para>
        <?rax revhistory?>
      </para>
    </section>
  </preface>
  <chapter xml:id="Overview">
    <title>Introduction</title>
    <!--You can use the <?dbhtml stop-chunking?> processing instruction to prevent a chapter or section for chunking furhter in the html output. -->
    <para>This would normally be a good place to introduce the product
      and API, but in this example document we'll look at some
      commonly used constructs. The following an image with a title
      using the <tag>figure</tag> element. The oXygen editor provides
      a convenient way to insert figures with the necessary markup. <figure>
        <title>An example of an .svg figure with a title</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="figures/example.png"
              contentwidth="6in"/>
          </imageobject>
        </mediaobject>
      </figure>
    </para>
    <para>When creating an image or diagram, use the correct
      application and format for the situation. For images with lines
      and text, you should use the scalable vector graphic format ,
      SVG. SVG and other vector formats store the information as
      points, lines, and fonts. As a result, they are very crisp when
      printed and when scaled down or up. For screen shots and photos,
      vector formats add no real value since they can only store the
      raster image inside the vector as a binary blob. As a result,
      you should use the png format scaled to the appropriate
      size/resolution for your target browsers/screens. <itemizedlist>
        <listitem>
          <para>If you are creating an architectural diagram, seqence
            diagram, flowchart, or something like a drawing with lots
            of lines and text, then the preferred format is .svg.
            Typically these are created with tools like <link
              xlink:href="http://inkscape.org/">Inkscape</link>, Adobe
            Illustrator, <link
              xlink:href="https://www.omnigroup.com/products/omnigraffle/"
              >Omnigraffle</link>, or Visio.</para>
        </listitem>
        <listitem>
          <para>If you are working with screen shots or photos, use
            png and a tool suited for manipulating raster formats.
          </para>
        </listitem>
      </itemizedlist>Note that the for html output formats, the build
      system converts .svg images to .png at build time since not all
      browsers are capable of displaying .svg images. The .svg is used
      directly for pdf output however. <table width="90%" >
        <caption>An example of a table with a title</caption>
        <col width="36%"/>
        <col width="13%"/>
        <col width="50%"/>
        <thead>
          <tr>
            <th>Type of image</th>
            <th>Preferred format</th>
            <th>Tools</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>Architectural diagrams, seqence diagrams, flowcharts,
              or drawings with lots of lines and text</td>
            <td>
              <para>.svg</para>
            </td>
            <td>
              <link xlink:href="http://inkscape.org/">Inkscape</link>,
              Adobe Illustrator, <link
                xlink:href="https://www.omnigroup.com/products/omnigraffle/"
                >Omnigraffle</link>, or Visio.</td>
          </tr>
          <tr>
            <td>A screen shot or picture</td>
            <td>
              <para>.png</para>
            </td>
            <td>
              <para>Any screen capture utility or raster image
                manipulating utility like the GIMP or Photoshop.
              </para>
            </td>
          </tr>
        </tbody>
      </table>
    </para>
    <para>You can also include tables without titles. These are
        <tag>informaltable</tag>s in DocBook. <important>
        <para>When you insert tables, be sure always to switch to the
          html format instead of the CALS table format. For more
          information on tables see the <link
            xlink:href="http://docs.rackspace.com/writers-guide/content/ch_tables.html"
            >Writer's Guide</link>.</para>
        <para>Also note that this is an example of an admonition.
          DocBook supports the following admonitions: <tag>note</tag>,
            <tag>tip</tag>, <tag>important</tag>, <tag>caution</tag>,
          and <tag>warning</tag>.</para>
      </important>
    </para>
    <section xml:id="the-xml-id-attribute">
      <title>The xml:id attribute and linking</title>
      <para>You must add the <tag>xml:id</tag> attribute to all
          <tag>book</tag>s, <tag>chapter</tag>s, <tag>section</tag>s,
          <tag>appendix</tag>s, and <tag>preface</tag>s. These ids are
        used for more than one thing:<itemizedlist>
          <listitem>
            <para>The <tag>xml:id</tag> on the <tag>book</tag> element
              must be unique among all other Rackspace documents. This
              ensures that the <link xlink:href="http://disqus.com"
                >Disqus</link> comments are associated with that one
              document. See <link
                xlink:href="https://one.rackspace.com/display/C3/Disqus+project+identifiers"
                >Disqus project identifiers</link> for a list of
                <tag>xml:id</tag>s currently in use.</para>
          </listitem>
          <listitem>
            <para>The <tag>xml:id</tag> on each  <tag>chapter</tag>,
                <tag>section</tag>, <tag>appendix</tag>, and
                <tag>preface</tag> must be unique within the current
              book. These ids are used to generate the filename for
              the html format and also to associate the Disqus thread
              with that page. </para>
          </listitem>
        </itemizedlist></para>
      <para><?rax-fo keep-together?>The <tag>xml:id</tag> attribute is
        also important for linking within the document. You use the
          <tag>xref</tag> element with the <tag>linkend</tag>
        attribute to create a hyperlink from one section to another.
        At build-time, the <tag>xref</tag> is replaced with a
        hyperlink and link text appropriate to the format. For
        example, in html output an xref is just a hyperlink with the
        title of the target as the link text. In pdf output, which is
        intended for printing, the link text includes the page number
        of the target, though in the pdf, the link is also a hot link
        to the target. In the following example, <code>preface</code>
        is the value of the <tag>xml:id</tag> of the target:<programlisting language="xml">&lt;xref linkend="preface"/></programlisting><important>
          <para>Avoid putting the <tag>xml:id</tag> attribute on the
              <tag>title</tag> tag. Instead put it on the element that
            contains the <tag>title</tag>. For example avoid doing
            this:<programlisting language="xml">&lt;section>&lt;title xml:id="widgets">Understanding widgets&lt;/title>...&lt;/section> &lt;!-- AVOID This! --></programlisting>Instead
            do
            this:<programlisting language="xml">&lt;section xml:id="widgets">&lt;title>Understanding widgets&lt;/title>...&lt;/section> &lt;!-- Much better! --></programlisting></para>
        </important></para>
      <para>We soon hope to support the <tag>olink</tag> tag, which
        will allow you to link to other docs and provide a more
        convenient way to link within a document. </para>
      <para>If you need to link to a url, use the <tag>link</tag> tag
        and the <tag>xlink:href</tag> attribute. For example, the
        paragraph above contains some
        hyperlinks:<programlisting language="xml">&lt;para>The &lt;tag>xml:id&lt;/tag> on the &lt;tag>book&lt;/tag> element
must be unique among all other Rackspace documents. This
ensures that the &lt;link xlink:href="http://disqus.com"
>Disqus&lt;/link> comments are associated with that one
document. See &lt;link 
xlink:href="https://one.rackspace.com/display/C3/Disqus+project+identifiers"
>Disqus project identifiers&lt;/link> for a list of
&lt;tag>xml:id&lt;/tag>s currently in use.&lt;/para></programlisting>
      </para>
    </section>
    <section xml:id="lists">
      <title>Lists</title>
      <para>The DocBook vocabulary supports several kinds of lists.
        These lists can optionally have titles. <tip>
          <para>A common pitfall writers fall into is to create
            several small sections. This is suboptimal because you're
            giving the full weight of a title in the table of contents
            to something that may have a single sentence of content.
            What you probably want in this case is some kind of
            list.</para>
        </tip><itemizedlist>
          <title>Types of list in DocBook</title>
          <para>Notice that this list has a title and an introductary
            paragraph before the first list item. The title and intro
            para are optional.</para>
          <listitem>
            <para><tag>itemizedlist</tag>: A bulleted list. Your hands
              are soaking in one.</para>
          </listitem>
          <listitem>
            <para><tag>orderedlist</tag>: A numbered list. There are
              attributes that let you control the type of numbering
              and the start of the numbering for unusual
              situations.</para>
          </listitem>
          <listitem>
            <para><tag>procedure</tag>: This is a list of steps.
            </para>
          </listitem>
          <listitem>
            <para><tag>variablelist</tag>: This is a list where each
              item includes one or more <quote>terms</quote> followed
              by a block of text describing it. You can control the
              formatting so that it's formatted as blocks or as a
              runin head. I'll include examples later in this
              section.</para>
          </listitem>
          <listitem>
            <para><tag>simplelist</tag>: This is a list without
              bullets.</para>
          </listitem>
        </itemizedlist>The following are examples of
          <tag>variablelist</tag>s. Notice that the
          <quote>term</quote> is in bold. See <link
          xlink:href="http://www.sagehill.net/docbookxsl/Variablelists.html"
          >variablelist options</link> for detailed information on
        formatting variablelists.<variablelist>
          <title>Variablelist with default layout</title>
          <varlistentry>
            <term>itemizedlist</term>
            <listitem>
              <para>A bulleted list. Your hands are soaking in
                one.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>orderedlist</term>
            <listitem>
              <para> A numbered list. There are attributes that let
                you control the type of numbering and the start of the
                numbering for unusual situations.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>procedure</term>
            <listitem>
              <para>This is a list of steps. As with other lists,
                  <tag>procedure</tag>s can have <tag>title</tag>s and
                some content before the first step. One use for
                  <tag>procedure</tag>s is that you can create a list
                of procedures at the front of the book. </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>variablelist</term>
            <listitem>
              <para>This is a list where each item includes one or
                more <quote>terms</quote> followed by a block of text
                describing it. You can control the formatting so that
                it's formatted as blocks or as a runin head. I'll
                include examples later in this section.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>simplelist</term>
            <listitem>
              <para>This is a list without bullets.</para>
            </listitem>
          </varlistentry>
        </variablelist><variablelist>
          <title>The same variablelist formatted as blocks</title>
          <?dbfo list-presentation="blocks"?> 
          <?dbfo term-width=".75in"?> 
          <?dbhtml list-presentation="table"?> 
          <?dbhtml term-width="15%"  list-width="85%" ?> 
          <varlistentry>
            <term>itemizedlist</term>
            <listitem>
              <para>A bulleted list. Your hands are soaking in
                one.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>orderedlist</term>
            <listitem>
              <para> A numbered list. There are attributes that let
                you control the type of numbering and the start of the
                numbering for unusual situations.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>procedure</term>
            <listitem>
              <para>This is a list of steps. As with other lists,
                  <tag>procedure</tag>s can have <tag>title</tag>s and
                some content before the first step. One use for
                  <tag>procedure</tag>s is that you can create a list
                of procedures at the front of the book. </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>variablelist</term>
            <listitem>
              <para>This is a list where each item includes one or
                more <quote>terms</quote> followed by a block of text
                describing it. You can control the formatting so that
                it's formatted as blocks or as a runin head. I'll
                include examples later in this section.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>simplelist</term>
            <listitem>
              <para>This is a list without bullets.</para>
            </listitem>
          </varlistentry>
        </variablelist></para>
    </section>
  </chapter>
  <chapter xml:id="other-features">
    <title>Conditional text/profiling</title>
    <para>One important feature of the publishing system is the
      ability to flag elements with certain attributes and produce
      different versions of the same document from the same source
      file. There are two scenarios in which you might use conditional text:<itemizedlist>
        <listitem>
          <para>Flagging content as internal, reviewer, or writeronly,
            for
            example:<programlisting>&lt;para security="internal">This para will not appear in the customer-facing external
verison of the document. It will appear in blue text in the internal version published on 
docs-internal.rackspace.com. &lt;/para></programlisting>If
            you instead use <tag>security="reviewer"</tag> the content
            will appear only if you set
              <tag>&lt;security>reviewer&lt;/security></tag> in your
              <filename>pom.xml</filename> file. </para>
        </listitem>
        <listitem>
          <para>Using a feature-flag to control whether content
            appears:<programlisting>&lt;para condition="foo-feature">This will appear only if the parameter profileCondition 
contains foo-feature in your pom.xml file.&lt;/para></programlisting>In
            your <filename>pom.xml</filename>, you can set
              <tag>&lt;profileCondition>foo-feature&lt;/profileCondition></tag>.
            Note that you can also use a semi-colon delimeted list:
              <tag>&lt;profileCondition>foo-feature;bar-feature&lt;/profileCondition></tag>
            to turn on elements with
              <tag>condition="foo-feature"</tag> and
              <tag>condition="bar-feature"</tag>.</para>
        </listitem>
      </itemizedlist></para>
  </chapter>
    <chapter xml:id="somesection" role="api-reference">
      <title>API Reference</title>
      <para>For more information on how this section works, see <link
        xlink:href="http://docs-internal.rackspace.com/writers-guide/content/ch_wadl.html"
        >Generating an API reference from a WADL file</link>. </para>

      <resources xmlns="http://wadl.dev.java.net/2009/02" href="../wadl/example.wadl"/>
      
    </chapter>
</book>
